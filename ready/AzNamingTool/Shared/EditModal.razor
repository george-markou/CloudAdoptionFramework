@using AzureNamingTool.Helpers
@using AzureNamingTool.Models
@using AzureNamingTool.Services
@using Microsoft.AspNetCore.Html
@inject IJSRuntime JsRuntime
@inject IToastService toastService
@inject ILogger<EditModal> Logger
@inject StateContainer state
@inject ProtectedSessionStorage session

<div class="modal fade show d-block" tabindex="-1" role="dialog">
    <div class="modal-backdrop fade show" @onclick="Cancel"></div>
    <div class="modal-dialog" style="z-index: 1050">
        <!-- Pop it above the backdrop -->
        <div class="modal-content @theme.ThemeStyle">
            <div class="modal-header bg-navcolor text-white">
                <h3 class="modal-title">@title</h3>
            </div>
            <div class="modal-body">
                <p>
                    @((MarkupString)message)
                </p>
                <div class="card mb-3">
                    <div class="card-header bg-default text-dark fw-bold">
                        Configuration
                    </div>
                    <div class="card card-body @theme.ThemeStyle">
                        <div class="mb-3">
                            This section allows you to modify the resource type validation settings.
                        </div>
                        <div class="mb-3">
                            <div class="fw-bold">
                                Name
                            </div>
                            <div class="mb-3">
                                @if (protectedName)
                                {
                                    @if (type == "ResourceComponent")
                                    {
                                        <input title="Name" value="@itemDisplayName" disabled type="text" class="form-control @theme.ThemeStyle" id="name" @onchange="@((ui) => { itemName = (string)ui.Value;})" />
                                    }
                                    else
                                    {
                                        <input title="Name" value="@itemName" disabled type="text" class="form-control @theme.ThemeStyle" id="name" @onchange="@((ui) => { itemName = (string)ui.Value;})" />
                                    }
                                }
                                else
                                {
                                    <input title="Name" value="@itemName" type="text" class="form-control @theme.ThemeStyle" id="name" @onchange="@((ui) => { itemName = (string)ui.Value;})" />
                                }
                            </div>
                        </div>
                        @if (type != "ResourceComponent")
                        {
                            <div class="mb-3">
                                <div class="fw-bold">
                                    Short Name
                                </div>
                                <div>
                                    <input title="Short Name" value="@itemShortName" type="text" class="form-control @theme.ThemeStyle" id="shortname" @onchange="@((ui) => { itemShortName = (string)ui.Value;})" />
                                </div>
                            </div>
                        }
                        @if ((type == "ResourceComponent") || ((type == "ResourceType") && (Convert.ToBoolean(config.ResourceTypeEditingAllowed))))
                        {
                            @if (type == "ResourceType")
                            {
                                <hr class="mt-1 mb-3" />
                                <div class="alert alert-danger alert-dismissible fade show mb-3" role="alert">
                                    <h4>ATTENTION</h4>
                                    <div class="mb-3">
                                        These settings are configured by the Azure Naming Tool team and match the Azure portal validation requirements. Overriding these values may result in invalid names for a resource.
                                    </div>
                                    @*<div>
                                        <button type="button" class="close btn btn-light" data-dismiss="alert" aria-label="Dismiss">
                                            <span aria-hidden="true">Dismiss</span>
                                        </button>
                                    </div>*@
                                </div>
                            }
                            <div class="mb-3">
                                <div class="fw-bold">
                                    Minimum Length
                                </div>
                                <div>
                                    <input title="Minimum Length" value="@itemMinLength" type="text" class="form-control @theme.ThemeStyle" id="minlength" @onchange="@((ui) => { itemMinLength = (string)ui.Value;})" onkeypress="return (event.charCode !=8 && event.charCode ==0 || (event.charCode >= 48 && event.charCode <= 57))" />
                                </div>
                            </div>
                            <div class="mb-3">
                                <div class="fw-bold">
                                    Maximum Length
                                </div>
                                <div>
                                    <input title="Maximum Length" value="@itemMaxLength" type="text" class="form-control @theme.ThemeStyle" id="maxlength" @onchange="@((ui) => { itemMaxLength = (string)ui.Value;})" onkeypress="return (event.charCode !=8 && event.charCode ==0 || (event.charCode >= 48 && event.charCode <= 57))" />
                                </div>
                            </div>
                        }
                        else
                        {
                            @if ((type == "ResourceType") && (!Convert.ToBoolean(config.ResourceTypeEditingAllowed)))
                            {
                                <hr class="mt-1 mb-3" />
                                <div class="alert alert-warning alert-dismissible fade show mb-3" role="alert">
                                    <h4>NOTE</h4>
                                    <div class="mb-3">
                                        These settings are disabled by default. You can allow the editing of these values by enabling the "Resource Type Editing" setting in the Admin section.
                                    </div>
                                    @*<div>
                                        <button type="button" class="close btn btn-light" data-dismiss="alert" aria-label="Dismiss">
                                            <span aria-hidden="true">Dismiss</span>
                                        </button>
                                    </div>*@
                                </div>
                                <div class="mb-3">
                                    <div class="fw-bold">
                                        Minimum Length
                                    </div>
                                    <div>
                                        <input title="Minimum Length" value="@itemMinLength" type="text" disabled class="form-control @theme.ThemeStyle" id="minlength" @onchange="@((ui) => { itemMinLength = (string)ui.Value;})" onkeypress="return (event.charCode !=8 && event.charCode ==0 || (event.charCode >= 48 && event.charCode <= 57))" />
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <div class="fw-bold">
                                        Maximum Length
                                    </div>
                                    <div>
                                        <input title="Maximum Length" value="@itemMaxLength" type="text" disabled class="form-control @theme.ThemeStyle" id="maxlength" @onchange="@((ui) => { itemMaxLength = (string)ui.Value;})" onkeypress="return (event.charCode !=8 && event.charCode ==0 || (event.charCode >= 48 && event.charCode <= 57))" />
                                    </div>
                                </div>
                            }
                        }
                    </div>

                </div>
                @if (type == "ResourceComponent")
                {
                    <div id="globallyoptionalcontainer" class="card mb-3">
                        <div class="card-header bg-default text-dark fw-bold">
                            <a id="OptionalComponents" class="link-dark text-decoration-none" data-bs-toggle="collapse" href="#globallyoptional" role="button" aria-expanded="false" aria-controls="globallyoptional">
                                <span class="oi oi-chevron-bottom" aria-hidden="true"></span> Globally Optional Configuration
                            </a>
                        </div>
                        <div class="collapse card card-body @theme.ThemeStyle" id="globallyoptional">
                            <div class="mb-3">
                                This section allows you to add/remove the component as OPTIONAL for all resource types.
                            </div>
                            <table class="table @theme.ThemeStyle">
                                <tbody>
                                    <tr>
                                        <td>
                                            This option will ADD the component as OPTIONAL for all resource types.
                                        </td>
                                        <td>
                                            <button type="button" class="btn btn-success w-100" @onclick="@(e => FormAction("ResourceComponent","optional-add"))" style="min-width:42px;" title="Add as OPTIONAL for all resoure types">
                                                ADD
                                            </button>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td>
                                            This option will REMOVE the component from OPTIONAL for all resource types.
                                        </td>
                                        <td>
                                            <button type="button" class="btn btn-danger w-100" @onclick="@(e => FormAction("ResourceComponent","optional-remove"))" style="min-width:42px;" title="Remove as OPTIONAL for all resoure types">
                                                REMOVE
                                            </button>
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                    <div id="globallyexcludecontainer" class="card mb-3">
                        <div class="card-header bg-default text-dark fw-bold">
                            <a id="OptionalComponents" class="link-dark text-decoration-none" data-bs-toggle="collapse" href="#globallyexclude" role="button" aria-expanded="false" aria-controls="globallyexclude">
                                <span class="oi oi-chevron-bottom" aria-hidden="true"></span> Globally Exclude Configuration
                            </a>
                        </div>
                        <div class="collapse card card-body @theme.ThemeStyle" id="globallyexclude">
                            <div class="mb-3">
                                This section allows you to add/remove the component as EXCLUDE for all resource types.
                            </div>
                            <table class="table">
                                <tbody>
                                    <tr>
                                        <td>
                                            This option will ADD the component as EXCLUDE for all resource types.
                                        </td>
                                        <td>
                                            <button type="button" class="btn btn-success w-100" @onclick="@(e => FormAction("ResourceComponent","exclude-add"))" style="min-width:42px;" title="Add as EXCLUDE for all resoure types">
                                                ADD
                                            </button>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td>
                                            This option will REMOVE the component from EXCLUDE for all resource types.
                                        </td>
                                        <td>
                                            <button type="button" class="btn btn-danger w-100" @onclick="@(e => FormAction("ResourceComponent","exclude-remove"))" style="min-width:42px;" title="Remove as EXCLUDE for all resoure types">
                                                REMOVE
                                            </button>
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                }
                @if ((type == "ResourceType") && (resourceComponents != null))
                {
                    @if (bool.Parse(ConfigurationHelper.GetAppSetting("DevMode")))
                    {
                        <div id="globallyoptionalcontainer" class="card mb-3">
                            <div class="card-header bg-default text-dark fw-bold">
                                Regex
                            </div>
                            <div class="card card-body @theme.ThemeStyle">
                                <input title="RegEx" value="@itemRegEx" type="text" class="form-control @theme.ThemeStyle" id="shortname" @onchange="@((ui) => { itemRegEx = (string)ui.Value;})" />
                            </div>
                        </div>
                    }
                    <div id="optional" class="card mb-3">
                        <div class="card-header bg-default text-dark fw-bold">
                            <a id="OptionalComponents" class="link-dark text-decoration-none" data-bs-toggle="collapse" href="#optionalcomponents" role="button" aria-expanded="false" aria-controls="optionalcomponents">
                                <span class="oi oi-chevron-bottom" aria-hidden="true"></span> Optional Components
                            </a>
                        </div>
                        <div class="collapse card card-body @theme.ThemeStyle" id="optionalcomponents">
                            @foreach (ResourceComponent resourceComponent in resourceComponents)
                            {
                                if (resourceComponent.Name != "ResourceType")
                                {
                                    <div class="form-check">
                                        @if (optional.ToLower().Split(',').Contains(GeneralHelper.NormalizeName(resourceComponent.Name, true)))
                                        {
                                            <input title="Optional Component" class="form-check-input" type="checkbox" value="" id="optional-@GeneralHelper.NormalizeName(resourceComponent.Name, true)" checked>
                                            <label class="form-check-label" for="optional-@GeneralHelper.NormalizeName(resourceComponent.Name, true)">
                                                @resourceComponent.DisplayName
                                            </label>
                                        }
                                        else
                                        {
                                            <input title="Optional Component" class="form-check-input" type="checkbox" value="" id="optional-@GeneralHelper.NormalizeName(resourceComponent.Name, true)">
                                            <label class="form-check-label" for="optional-@GeneralHelper.NormalizeName(resourceComponent.Name, true)">
                                                @resourceComponent.DisplayName
                                            </label>
                                        }
                                    </div>
                                }
                            }
                        </div>
                    </div>

                    <div id="excluded" class="card mb-3">
                        <div class="card-header bg-default text-dark fw-bold">
                            <a id="ExcludedComponents" class="link-dark text-decoration-none" data-bs-toggle="collapse" href="#excludedcomponents" role="button" aria-expanded="false" aria-controls="excludedcomponents">
                                <span class="oi oi-chevron-bottom" aria-hidden="true"></span> Excluded Components
                            </a>
                        </div>
                        <div class="collapse card card-body @theme.ThemeStyle" id="excludedcomponents">
                            @foreach (ResourceComponent resourceComponent in resourceComponents)
                            {
                                //@if (resourceComponent.Name != "ResourceType")
                                //{
                                <div class="form-check">
                                    @if (exclude.ToLower().Split(',').Contains(GeneralHelper.NormalizeName(resourceComponent.Name, true)))
                                    {
                                        <input title="Excluded Component" class="form-check-input" type="checkbox" id="exclude-@GeneralHelper.NormalizeName(resourceComponent.Name, true)" checked>
                                        <label class="form-check-label" for="exclude-@GeneralHelper.NormalizeName(resourceComponent.Name, true)">
                                            @resourceComponent.DisplayName
                                        </label>
                                    }
                                    else
                                    {
                                        <input title="Excluded Component" class="form-check-input" type="checkbox" id="exclude-@GeneralHelper.NormalizeName(resourceComponent.Name, true)">
                                        <label class="form-check-label" for="exclude-@GeneralHelper.NormalizeName(resourceComponent.Name, true)">
                                            @resourceComponent.DisplayName
                                        </label>
                                    }
                                </div>
                                //}
                            }
                        </div>
                    </div>
                }
            </div>
            <div class="modal-footer">

                <button title="Save" @onclick="Save" class="btn btn-success">Update</button>

                <button title="Cancel" @onclick="Cancel" class="btn btn-secondary">Close</button>
            </div>
        </div>
    </div>
</div>



@code {

    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    [Parameter] public ThemeInfo theme { get; set; }
    [CascadingParameter]
    public IModalService Modal { get; set; }

    [Parameter] public int id { get; set; }
    [Parameter] public string title { get; set; }
    [Parameter] public string message { get; set; }
    [Parameter] public string type { get; set; }
    [Parameter] public bool protectedName { get; set; }
    [Parameter] public string? parentcomponent { get; set; }
    [Parameter] public ServicesData servicesData { get; set; }


    private ServiceResponse serviceResponse = new();
    private string? itemName;
    private string? itemDisplayName;
    private string? itemShortName;
    private string? itemRegEx;
    private string? itemMinLength;
    private string? itemMaxLength;
    private string? itemMinLengthOriginal;
    private string? itemMaxLengthOriginal;
    private List<ResourceComponent> resourceComponents;
    private string? optional;
    private string? exclude;
    private bool ischecked = false;
    private string? currentuser;
    private ResponseMessage responseMessage = new();
    private SiteConfiguration config = ConfigurationHelper.GetConfigurationData();

    protected override async void OnInitialized()
    {
        switch (type)
        {
            case "ResourceComponent":
                ResourceComponent resourceComponent = servicesData.ResourceComponents.Find(x => x.Id == id);
                itemName = resourceComponent.Name;
                itemDisplayName = resourceComponent.DisplayName;
                itemMinLength = resourceComponent.MinLength;
                itemMinLengthOriginal = itemMinLength;
                itemMaxLength = resourceComponent.MaxLength;
                itemMaxLengthOriginal = itemMaxLength;
                break;
            case "ResourceEnvironment":
                ResourceEnvironment resourceEnvironment = servicesData.ResourceEnvironments.Find(x => x.Id == id);
                itemName = resourceEnvironment.Name;
                itemShortName = resourceEnvironment.ShortName;
                break;
            case "ResourceLocation":
                ResourceLocation resourceLocation = servicesData.ResourceLocations.Find(x => x.Id == id);
                itemName = resourceLocation.Name;
                itemShortName = resourceLocation.ShortName;
                break;
            case "ResourceOrg":
                ResourceOrg resourceOrg = servicesData.ResourceOrgs.Find(x => x.Id == id);
                itemName = resourceOrg.Name;
                itemShortName = resourceOrg.ShortName;
                break;
            case "ResourceProjAppSvc":
                ResourceProjAppSvc resourceProjAppSvc = servicesData.ResourceProjAppSvcs.Find(x => x.Id == id);
                itemName = resourceProjAppSvc.Name;
                itemShortName = resourceProjAppSvc.ShortName;
                break;
            case "ResourceType":
                serviceResponse = await ResourceTypeService.GetItem(id);
                ResourceType resourceType = servicesData.ResourceTypes.Find(x => x.Id == id);
                itemName = resourceType.Resource;
                itemShortName = resourceType.ShortName;
                optional = resourceType.Optional;
                exclude = resourceType.Exclude;
                itemRegEx = resourceType.Regx;
                itemMinLength = resourceType.LengthMin;
                itemMinLengthOriginal = itemMinLength;
                itemMaxLength = resourceType.LengthMax;
                itemMaxLengthOriginal = itemMaxLength;
                resourceComponents = servicesData.ResourceComponents.OrderBy(x => x.Name).ToList();
                break;
            case "ResourceUnitDept":
                ResourceUnitDept resourceUnitDept = servicesData.ResourceUnitDepts.Find(x => x.Id == id);
                itemName = resourceUnitDept.Name;
                itemShortName = resourceUnitDept.ShortName;
                break;
            case "ResourceFunction":
                ResourceFunction resourceFunction = servicesData.ResourceFunctions.Find(x => x.Id == id);
                itemName = resourceFunction.Name;
                itemShortName = resourceFunction.ShortName;
                break;
            case "CustomComponent":
                CustomComponent customComponent = servicesData.CustomComponents.Find(x => x.Id == id);
                itemName = customComponent.Name;
                itemShortName = customComponent.ShortName;
                break;
        }
        currentuser = await IdentityHelper.GetCurrentUser(session);
    }

    async void Save()
    {
        try
        {
            bool valid = false;

            // Make sure the min/max length is valid
            if (Convert.ToInt32(itemMaxLength) < Convert.ToInt32(itemMinLength))
            {
                toastService.ShowError("The Maximum Length must equal/greater than the Minimum length!");
            }
            else
            {
                if (type == "ResourceComponent")
                {
                    if (itemName != null)
                    {
                        if (itemName != "")
                        {
                            valid = true;
                            // Check if the user modified the min/max lengths and warn them to update their options
                            if ((itemMinLength != itemMinLengthOriginal) || (itemMaxLength != itemMaxLengthOriginal))
                            {
                                toastService.ShowInfo("You have modified the min/max length. You will need to verify the existing options meet the new length requirements!");
                            }

                            ResourceComponent resourceComponent = servicesData.ResourceComponents.Find(x => x.Id == id);

                            // Update any references in the custom components configuration to be the new custom component type name
                            var customcomponents = (List<CustomComponent>)servicesData.CustomComponents.FindAll(x => GeneralHelper.NormalizeName(x.ParentComponent, true) == GeneralHelper.NormalizeName(resourceComponent.Name, true));
                            foreach (var customcomponent in customcomponents)
                            {
                                customcomponent.ParentComponent = GeneralHelper.NormalizeName(itemName, true);
                                serviceResponse = await CustomComponentService.PostItem(customcomponent);
                            }
                            resourceComponent.Name = itemName;
                            resourceComponent.DisplayName = itemName;
                            resourceComponent.MinLength = itemMinLength;
                            resourceComponent.MaxLength = itemMaxLength;
                            serviceResponse = await ResourceComponentService.PostItem(resourceComponent);
                        }
                        else
                        {
                            toastService.ShowError("You must enter a name!");
                        }
                    }
                    else
                    {
                        toastService.ShowError("You must enter a name!");
                    }
                }
                else
                {
                    if ((itemName != "") && (itemShortName != ""))
                    {
                        if (await ValidationHelper.ValidateShortName(type, itemShortName, this.parentcomponent))
                        {
                            valid = true;
                            switch (type)
                            {
                                case "ResourceEnvironment":
                                    ResourceEnvironment resourceEnvironment = servicesData.ResourceEnvironments.Find(x => x.Id == id);
                                    resourceEnvironment.Name = itemName;
                                    resourceEnvironment.ShortName = itemShortName;
                                    serviceResponse = await ResourceEnvironmentService.PostItem(resourceEnvironment);
                                    break;
                                case "ResourceLocation":
                                    ResourceLocation resourceLocation = servicesData.ResourceLocations.Find(x => x.Id == id);
                                    resourceLocation.ShortName = itemShortName;
                                    serviceResponse = await ResourceLocationService.PostItem(resourceLocation);
                                    break;
                                case "ResourceOrg":
                                    ResourceOrg resourceOrg = servicesData.ResourceOrgs.Find(x => x.Id == id);
                                    resourceOrg.Name = itemName;
                                    resourceOrg.ShortName = itemShortName;
                                    serviceResponse = await ResourceOrgService.PostItem(resourceOrg);
                                    break;
                                case "ResourceProjAppSvc":
                                    ResourceProjAppSvc resourceProjAppSvc = servicesData.ResourceProjAppSvcs.Find(x => x.Id == id);
                                    resourceProjAppSvc.Name = itemName;
                                    resourceProjAppSvc.ShortName = itemShortName;
                                    serviceResponse = await ResourceProjAppSvcService.PostItem(resourceProjAppSvc);
                                    break;
                                case "ResourceType":
                                    ResourceType resourceType = servicesData.ResourceTypes.Find(x => x.Id == id);
                                    resourceType.ShortName = itemShortName;
                                    resourceType.Optional = "";
                                    resourceType.Exclude = "";
                                    if (!String.IsNullOrEmpty(itemMinLength.ToString()))
                                    {
                                        if (ValidationHelper.CheckNumeric(itemMinLength.ToString()))
                                        {
                                            resourceType.LengthMin = itemMinLength.ToString();
                                        }
                                    }
                                    if (!String.IsNullOrEmpty(itemMaxLength.ToString()))
                                    {
                                        if (ValidationHelper.CheckNumeric(itemMaxLength.ToString()))
                                        {
                                            resourceType.LengthMax = itemMaxLength.ToString();
                                        }
                                    }
                                    if (bool.Parse(ConfigurationHelper.GetAppSetting("DevMode")))
                                    {
                                        resourceType.Regx = itemRegEx;
                                    }

                                    // Update the Optional and Exclude components
                                    foreach (ResourceComponent resourceComponent in resourceComponents)
                                    {
                                        if (resourceComponent.Name != "ResourceType")
                                        {
                                            // Optional
                                            ischecked = false;
                                            ischecked = await JsRuntime.InvokeAsync<bool>("IsElementChecked", "optional-" + GeneralHelper.NormalizeName(resourceComponent.Name, true));
                                            if (ischecked)
                                            {
                                                List<string> currentoptional = new List<string>(resourceType.Optional.Split(','));
                                                if (!currentoptional.Contains(resourceComponent.Name))
                                                {
                                                    currentoptional.Add(GeneralHelper.NormalizeName(resourceComponent.Name, true));
                                                    resourceType.Optional = String.Join(",", currentoptional.ToArray());
                                                }
                                            }
                                        }

                                        // Exclude
                                        ischecked = false;
                                        ischecked = await JsRuntime.InvokeAsync<bool>("IsElementChecked", "exclude-" + GeneralHelper.NormalizeName(resourceComponent.Name, true));
                                        if (ischecked)
                                        {
                                            List<string> currentexclude = new List<string>(resourceType.Exclude.Split(','));
                                            if (!currentexclude.Contains(resourceComponent.Name))
                                            {
                                                currentexclude.Add(GeneralHelper.NormalizeName(resourceComponent.Name, true));
                                                resourceType.Exclude = String.Join(",", currentexclude.ToArray());
                                            }
                                        }
                                    }
                                    serviceResponse = await ResourceTypeService.PostItem(resourceType);
                                    break;
                                case "ResourceUnitDept":
                                    ResourceUnitDept resourceUnitDept = servicesData.ResourceUnitDepts.Find(x => x.Id == id);
                                    resourceUnitDept.Name = itemName;
                                    resourceUnitDept.ShortName = itemShortName;
                                    serviceResponse = await ResourceUnitDeptService.PostItem(resourceUnitDept);
                                    break;
                                case "ResourceFunction":
                                    ResourceFunction resourceFunction = servicesData.ResourceFunctions.Find(x => x.Id == id);
                                    resourceFunction.Name = itemName;
                                    resourceFunction.ShortName = itemShortName;
                                    serviceResponse = await ResourceFunctionService.PostItem(resourceFunction);
                                    break;
                                case "CustomComponent":
                                    CustomComponent customComponent = servicesData.CustomComponents.Find(x => x.Id == id);
                                    customComponent.Name = itemName;
                                    customComponent.ShortName = itemShortName;
                                    customComponent.MinLength = itemMinLength;
                                    customComponent.MaxLength = itemMaxLength;
                                    serviceResponse = await CustomComponentService.PostItem(customComponent);
                                    break;
                            }
                        }
                        else
                        {
                            toastService.ShowError("You must enter a valid short name!");
                        }
                    }
                    else
                    {
                        toastService.ShowError("You must enter a name and short name!");
                    }
                }
            }
            if (valid)
            {
                if (serviceResponse.Success)
                {
                    ModalInstance.CloseAsync();
                    toastService.ShowSuccess(GeneralHelper.NormalizeName(type, false) + " updated!");
                    AdminLogService.PostItem(new AdminLogMessage() { Title = "SUCCESS", Message = "(" + GeneralHelper.NormalizeName(type, false) + ") " + itemName + " updated!", Source = currentuser });
                }
                else
                {
                    toastService.ShowError("There was an error updating the " + GeneralHelper.NormalizeName(type, false) + "! " + serviceResponse.ResponseObject);
                }
            }
        }
        catch (Exception ex)
        {
            AdminLogService.PostItem(new AdminLogMessage() { Title = "ERROR", Message = ex.Message });
            toastService.ShowError("There was an error updating the " + GeneralHelper.NormalizeName(type, false) + "! " + ex.Message);
        }
    }

    private async Task FormAction(string type, string action)
    {
        bool confirm = false;
        confirm = await JsRuntime.InvokeAsync<bool>("confirm", "This will update all resource types! Are you sure?");
        if (confirm)
        {

            responseMessage = new ResponseMessage();
            var workingmodaloptions = new ModalOptions()
                {
                    HideCloseButton = true,
                    UseCustomLayout = true
                };

            var workingmodal = Modal.Show<WorkingModal>("Working", workingmodaloptions);

            try
            {
                ServiceResponse serviceResponse;
                switch (type)
                {
                    case "ResourceComponent":
                        ResourceComponent resourceComponent = servicesData.ResourceComponents.Find(x => x.Id == id);
                        int componentid = (int)resourceComponent.Id;
                        responseMessage.Message = resourceComponent.Name;
                        List<string> currentvalues = new();
                        switch (action)
                        {
                            case "optional-add":
                                serviceResponse = await ResourceTypeService.UpdateTypeComponents("optional-add", componentid);
                                if (serviceResponse.Success)
                                {
                                    responseMessage.Message += " ADDED as OPTIONAL!";
                                }
                                break;
                            case "optional-remove":
                                serviceResponse = await ResourceTypeService.UpdateTypeComponents("optional-remove", componentid);
                                if (serviceResponse.Success)
                                {
                                    responseMessage.Message += " REMOVED from OPTIONAL!";
                                }
                                break;
                            case "exclude-add":
                                serviceResponse = await ResourceTypeService.UpdateTypeComponents("exclude-add", componentid);
                                if (serviceResponse.Success)
                                {
                                    responseMessage.Message += " ADDED as EXCLUDE!";
                                }
                                break;
                            case "exclude-remove":
                                serviceResponse = await ResourceTypeService.UpdateTypeComponents("exclude-remove", componentid);
                                if (serviceResponse.Success)
                                {
                                    responseMessage.Message += " REMOVED from EXCLUDE!";
                                }
                                break;
                        }
                        break;
                }

                StateHasChanged();
            }
            catch (Exception ex)
            {
                AdminLogService.PostItem(new AdminLogMessage() { Title = "ERROR", Message = ex.Message });
                responseMessage.Type = MessageTypesEnum.ERROR;
                responseMessage.Message = "There was a problem with the request.";
            }

            workingmodal.Close();

            if (responseMessage.Message != null)
            {
                responseMessage.Message = "(" + GeneralHelper.NormalizeName(type, false) + ") " + itemName + " " + responseMessage.Message;
                switch (responseMessage.Type)
                {
                    case MessageTypesEnum.INFORMATION:
                        toastService.ShowInfo(responseMessage.Message);
                        break;
                    case MessageTypesEnum.SUCCESS:
                        toastService.ShowSuccess(responseMessage.Message);
                        break;
                    case MessageTypesEnum.WARNING:
                        toastService.ShowWarning(responseMessage.Message);
                        break;
                    case MessageTypesEnum.ERROR:
                        toastService.ShowError(responseMessage.Message);
                        break;
                }
                AdminLogService.PostItem(new AdminLogMessage() { Title = responseMessage.Type.ToString(), Message = responseMessage.Message, Source = currentuser });
            }
        }
    }

    async Task Cancel() => await ModalInstance.CancelAsync();
}
